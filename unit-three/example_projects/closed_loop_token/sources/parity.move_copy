// Copyright (c) Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

/// Example coin with a trusted manager responsible for minting/burning (e.g., a stablecoin)
/// By convention, modules defining custom coin types use upper case names, in contrast to
/// ordinary modules, which use camel case.
module closed_loop_token::parity {
    use std::option;
    use sui::coin::{Self, Coin, TreasuryCap};
    use sui::transfer;
    use std::string::utf8;
    use sui::tx_context::{Self, TxContext};
    use sui::token::{Self, TokenPolicy, ActionRequest};


    /// Name of the coin. By convention, this type has the same name as its parent module
    /// and has no fields. The full type of the coin defined by this module will be `COIN<PARITY>`.
    struct PARITY has drop {}

    /// The Rule witness.
    struct ParityRule has drop {}

    /// Register the PARITY currency to acquire its `TreasuryCap`. Because
    /// this is a module initializer, it ensures the currency only gets
    /// registered once.
    fun init(witness: PARITY, ctx: &mut TxContext) {
        let (treasury_cap, metadata) = coin::create_currency<PARITY>(witness, 2, b"PARITY", b"MNG", b"", option::none(), ctx);
        transfer::public_freeze_object(metadata);
        let (policy, policy_cap) = token::new_policy<PARITY>(&treasury_cap, ctx);
        token::add_rule_for_action<PARITY, ParityRule>(&mut policy, &policy_cap, utf8(b"from_coin"), ctx);
        token::share_policy(policy);
        transfer::public_transfer(policy_cap,tx_context::sender(ctx));
        transfer::public_transfer(treasury_cap, tx_context::sender(ctx))
    }

    /// Manager can mint new coins
    public fun mint(
        treasury_cap: &mut TreasuryCap<PARITY>, amount: u64, recipient: address, ctx: &mut TxContext
    ) {
        coin::mint_and_transfer(treasury_cap, amount, recipient, ctx)
    }

    public fun treasure_cap_mint_token(
        treasury_cap: &mut TreasuryCap<PARITY>, amount: u64, ctx: &mut TxContext
    ) {
        let _coin = coin::mint(treasury_cap, amount, ctx);
        let (_token, _request) = token::from_coin(_coin, ctx);
        token::confirm_with_treasury_cap(treasury_cap, _request, ctx);
        token::keep(_token, ctx)
    }

    public fun policy_mint_token(treasury_cap: &mut TreasuryCap<PARITY>, policy: &TokenPolicy<PARITY>, amount: u64, ctx: &mut TxContext
    ) {
        let _coin = coin::mint(treasury_cap, amount, ctx);
        let (_token, _request) = token::from_coin(_coin, ctx);
        verify(policy, &mut _request, ctx);
        token::confirm_request(policy, _request, ctx);
        token::keep(_token, ctx)
    }    

    /// Manager can burn coins
    public fun burn(treasury_cap: &mut TreasuryCap<PARITY>, coin: Coin<PARITY>) {
        coin::burn(treasury_cap, coin);
    }

    /// Verifies that the sender and the recipient (if set) are not on the
    /// denylist for the given action.
    public fun verify<T>(
        _policy: &TokenPolicy<T>,
        request: &mut ActionRequest<T>,
        ctx: &mut TxContext
    ) {

        let amount = token::amount(request);

        if (amount % 2 == 1) {
            token::add_approval(ParityRule {}, request, ctx);
            return
        };
    }

}
